// <auto-generated />
using System;
using AkkaTransfer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AkkaTransfer.Data.Migrations
{
    [DbContext(typeof(ReceiveDbContext))]
    [Migration("20230228224333_SplitManifest")]
    partial class SplitManifest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.ReceiveManifest", b =>
                {
                    b.Property<int>("ReceiveManifestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ReceiveManifestId");

                    b.ToTable("ReceiveManifests");
                });

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.ReceiveManifestFile", b =>
                {
                    b.Property<int>("ReceiveManifestFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceiveManifestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReceiveManifestFileId");

                    b.HasIndex("ReceiveManifestId");

                    b.ToTable("ReceiveManifestFiles");
                });

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.SendManifest", b =>
                {
                    b.Property<int>("SendManifestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("SendManifestId");

                    b.ToTable("SendManifests");
                });

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.SendManifestFile", b =>
                {
                    b.Property<int>("SendManifestFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<int>("SendManifestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SendManifestFileId");

                    b.HasIndex("SendManifestId");

                    b.ToTable("SendManifestFiles");
                });

            modelBuilder.Entity("AkkaTransfer.Data.ReceiveFile.ReceiveFileHeader", b =>
                {
                    b.Property<int>("ReceiveFileHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PieceCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReceiveFileHeaderId");

                    b.ToTable("ReceiveFileHeaders");
                });

            modelBuilder.Entity("AkkaTransfer.Data.ReceiveFile.ReceiveFilePiece", b =>
                {
                    b.Property<int>("ReceiveFilePieceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiveFileHeaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReceiveFilePieceId");

                    b.HasIndex("ReceiveFileHeaderId");

                    b.ToTable("ReceiveFilePieces");
                });

            modelBuilder.Entity("AkkaTransfer.Data.SendFile.SendFileHeader", b =>
                {
                    b.Property<int>("SendFileHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PieceCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("SendFileHeaderId");

                    b.ToTable("SendFileHeaders");
                });

            modelBuilder.Entity("AkkaTransfer.Data.SendFile.SendFilePiece", b =>
                {
                    b.Property<int>("SendFilePieceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SendFileHeaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SendFilePieceId");

                    b.HasIndex("SendFileHeaderId");

                    b.ToTable("SendFilePieces");
                });

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.ReceiveManifestFile", b =>
                {
                    b.HasOne("AkkaTransfer.Data.Manifest.ReceiveManifest", null)
                        .WithMany("ReceiveManifestFiles")
                        .HasForeignKey("ReceiveManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.SendManifestFile", b =>
                {
                    b.HasOne("AkkaTransfer.Data.Manifest.SendManifest", null)
                        .WithMany("SendManifestFiles")
                        .HasForeignKey("SendManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AkkaTransfer.Data.ReceiveFile.ReceiveFilePiece", b =>
                {
                    b.HasOne("AkkaTransfer.Data.ReceiveFile.ReceiveFileHeader", null)
                        .WithMany("ReceiveFilePieces")
                        .HasForeignKey("ReceiveFileHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AkkaTransfer.Data.SendFile.SendFilePiece", b =>
                {
                    b.HasOne("AkkaTransfer.Data.SendFile.SendFileHeader", null)
                        .WithMany("SendFilePieces")
                        .HasForeignKey("SendFileHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.ReceiveManifest", b =>
                {
                    b.Navigation("ReceiveManifestFiles");
                });

            modelBuilder.Entity("AkkaTransfer.Data.Manifest.SendManifest", b =>
                {
                    b.Navigation("SendManifestFiles");
                });

            modelBuilder.Entity("AkkaTransfer.Data.ReceiveFile.ReceiveFileHeader", b =>
                {
                    b.Navigation("ReceiveFilePieces");
                });

            modelBuilder.Entity("AkkaTransfer.Data.SendFile.SendFileHeader", b =>
                {
                    b.Navigation("SendFilePieces");
                });
#pragma warning restore 612, 618
        }
    }
}
